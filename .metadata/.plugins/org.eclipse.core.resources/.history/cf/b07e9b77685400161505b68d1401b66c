package com.kafka.test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.atomic.AtomicBoolean;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.common.errors.WakeupException;

public class HelloWorldConsomerThread implements Runnable {
	private static String BOOTSTAP_SERVER = "120.26.230.18:9092";
	private final static int minBatchSize = 100;
	private final static int TIMEOUT_CONSOMER_POLL = 100;
	private final AtomicBoolean closed = new AtomicBoolean(false);

	Properties props = new Properties();

	private KafkaConsumer consumer = null;

	public HelloWorldConsomerThread() {
		props.put("bootstrap.servers", BOOTSTAP_SERVER);
		props.put("group.id", "test2");
		props.put("enable.auto.commit", "true");
		props.put("auto.commit.interval.ms", "1000");
		props.put("session.timeout.ms", "30000");
		props.put("max.poll.records", 10);
		props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
		props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
		consumer = new KafkaConsumer<>(props);

	}

	public void run() {
		try {
			List<ConsumerRecord<String, String>> buffer = new ArrayList<ConsumerRecord<String, String>>();
			consumer.subscribe(Arrays.asList(topic));
			while (!closed.get()) {
				ConsumerRecords records = consumer.poll(TIMEOUT_CONSOMER_POLL);
				// Handle new records
			}
		} catch (WakeupException e) {
			// Ignore exception if closing
			if (!closed.get())
				throw e;
		} finally {
			consumer.close();
		}
	}

	// Shutdown hook which can be called from a separate thread
	public void shutdown() {
		closed.set(true);
		consumer.wakeup();
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
